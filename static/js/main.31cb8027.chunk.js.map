{"version":3,"sources":["utils.js","Components/InputMood/InputMood.jsx","Components/ShowMood/ShowMood.jsx","App.js","serviceWorker.js","index.js"],"names":["getDateObj","newDate","arguments","length","undefined","date","Date","dateDisplay","toDateString","substr","dateUniform","toLocaleDateString","split","join","InputMood","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","zip","mood","weatherData","submit","bind","assertThisInitialized","getAPIData","_this2","url","concat","fetch","then","res","json","setState","data","weather","_this$state","onSubmit","temp","Math","floor","main","desc","_this3","button","react_default","a","createElement","onClick","id","role","aria-label","value","onChange","e","target","type","pattern","placeholder","name","defaultValue","disabled","hidden","Component","ShowMood","className","entry","charAt","toUpperCase","slice","App","entries","appendNewEntry","deleteEntries","localStorage","getItem","setItem","JSON","parse","removeItem","stringify","toConsumableArray","map","ShowMood_ShowMood_ShowMood","key","InputMood_InputMood_InputMood","mapEntriesToComponents","href","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.31cb8027.chunk.js","sourcesContent":["export const getDateObj = (newDate=undefined) => {\n  // Returns dateObj, an Object containing a date in various forms\n  // Date can be an argument or be created new on function call without arguments\n  const date = newDate ? new Date(newDate) : new Date()   // create a `newDate(newDate)`, or create a `new Date()`\n  const dateDisplay = date.toDateString().substr(0, date.toDateString().length - 5)\n  const dateUniform = date.toLocaleDateString().substr(0,10).split('/').join('-')\n  const dateObj = {\n    date,          // 1998-02-19T20:14:01.042Z\n    dateUniform,   // 02-19-98\n    dateDisplay,   // Thu Feb 19\n  }\n\n  return dateObj\n}\n\nexport const getWeatherObj = (weather) => {\n  // Returns necessary data from API response\n  const weatherObj = {\n    \"temp\": Math.floor((weather.main.temp - 273) * (9/5) + 32), // convert Kelvin to F\n    \"desc\": weather.weather[0].main // \"Rain\"\n  }\n  return weatherObj\n}\n","import React, { Component } from 'react'\nimport './InputMood.css'\nimport { getDateObj, getWeatherObj } from './../../utils'\n\nexport default class InputMood extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      zip: '',\n      mood: '',\n      weatherData: undefined,\n    }\n\n    // binding this\n    this.submit = this.submit.bind(this)\n    this.getAPIData = this.getAPIData.bind(this)\n  }\n\n  getAPIData(zip) {\n    const key = '150d08ec845e46d771bfc2e74380f543'\n    const url = `https://api.openweathermap.org/data/2.5/weather?zip=${zip},us&appid=${key}`\n    // Fetch OpenWeatherMap Data from given zip code\n    // set data to `this.state.weatherData`\n    fetch(url)\n      .then(res => res.json())\n      .then(json => { this.setState({ weatherData: json }) })\n  }\n\n  submit() {\n    const { zip, mood, weatherData } = this.state\n    const { onSubmit } = this.props\n    let data // controls waiting on API data, scoping\n    // Get `this.state.weatherData` from API response\n    this.getAPIData(zip)\n    if (weatherData) {\n      // if `this.state.weatherData` is defined, set entry data\n      // using imported helper functions\n      data = {\n        \"weather\": getWeatherObj(weatherData),\n        mood,\n        \"date\": getDateObj().dateDisplay\n      }\n    }\n    if (data) {\n      // once data is defined, pass to parent component (App.js)\n      onSubmit(data)\n    }\n  }\n\n  render() {\n    // Conditional rendering control for submit button\n    let button = undefined\n    if (this.state.zip && this.state.mood) {\n      button = <button onClick={this.submit}>submit!</button>\n    }\n\n    return (\n      <section id=\"input-mood\">\n\n        {/* Zip Code Input */}\n        <label>\n          <h1><span role=\"img\" aria-label=\"Hand Waving Emojis\">ðŸ‘‹ðŸ‘‹ðŸ‘‹</span></h1>\n          <h1>where are ya? <span role=\"img\" aria-label=\"Earth Globe Americas Emoji\">ðŸŒŽ</span></h1>\n          <input\n            value={this.state.zip}\n            onChange={e => this.setState({ zip: e.target.value })}\n            type=\"text\"\n            pattern=\"(\\d{5}([\\-]\\d{4})?)\"\n            placeholder=\"my usa zip\"\n          />\n        </label>\n\n        {/* Mood Input */}\n        <label>\n          <h1>what's the mood? <span role=\"img\" aria-label=\"Hot Tea Emoji\">â˜•</span></h1>\n          <select\n            name=\"mood\"\n            value={this.state.mood}\n            onChange={e => this.setState({ mood: e.target.value })}\n          >\n            {/* Mood Options */}\n            <option value=\"\" defaultValue disabled hidden>my mood</option>\n            <option value=\"happy\">happy</option>\n            <option value=\"confident\">confident</option>\n            <option value=\"energized\">energized</option>\n            <option value=\"fine\">fine</option>\n            <option value=\"inspired\">inspired</option>\n            <option value=\"focused\">focused</option>\n            <option value=\"flirty\">flirty</option>\n            <option value=\"playful\">playful</option>\n            <option value=\"angry\">angry</option>\n            <option value=\"bored\">bored</option>\n            <option value=\"embarrassed\">embarrassed</option>\n            <option value=\"sad\">sad</option>\n            <option value=\"tense\">tense</option>\n            <option value=\"uncomfortable\">uncomfortable</option>\n          </select>\n        </label>\n        \n        {/* Conditionally rendered submit button */}\n        {button}\n      </section>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nimport './ShowMood.css'\n\nexport default class ShowMood extends Component {\n  render() {\n    return (\n      <div className=\"show-mood-component\">\n        <p>{this.props.entry.date}</p>\n        <p>Feeling {this.props.entry.mood.charAt(0).toUpperCase() + this.props.entry.mood.slice(1)}</p>\n        <p>{this.props.entry.weather.temp}Â° and {this.props.entry.weather.desc}</p>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nimport InputMood from './Components/InputMood/InputMood'\nimport ShowMood from './Components/ShowMood/ShowMood'\n\nimport './App.css'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      entries: undefined\n    }\n\n    // binding this\n    this.appendNewEntry = this.appendNewEntry.bind(this)\n    this.deleteEntries = this.deleteEntries.bind(this)\n  }\n  \n  componentDidMount() {\n    const { entries } = this.state\n    if (entries === undefined) {\n      if (localStorage.getItem('entries') === null) {\n        // if `this.state.entries` is undefined and localStorage's entries is null\n        // set localStorage's entries to `this.state.entries` (aka [])\n        this.setState({ entries: [] })\n        localStorage.setItem('entries', entries)\n      } else {\n        // if `this.state.entries` is undefined but localStorage's entries is not null\n        // and set `this.state.entries` to localStorage's entries\n        const data = localStorage.getItem('entries')\n        this.setState({ entries: JSON.parse(data) })\n      }\n    } else {\n      // if `this.state.entries` is not undefined\n      // set localStorage's entries to that array\n      localStorage.removeItem('entries')\n      localStorage.setItem('entries', JSON.stringify(entries))\n    }\n  }\n\n  componentDidUpdate() {\n    // re-set localStorage's entries with each render\n    const { entries } = this.state\n    localStorage.removeItem('entries')\n    localStorage.setItem('entries', JSON.stringify(entries))\n  }\n\n  appendNewEntry(entry) {\n    // statefully update `this.state.entries`\n    this.setState({ entries: [...this.state.entries, entry] })\n  }\n\n  deleteEntries() {\n    // deletes all entries from state and localStorage\n    this.setState({ entries: [] })\n    localStorage.removeItem('entries')\n  }\n\n  mapEntriesToComponents() {\n    const { entries } = this.state\n    if (entries) {\n      if (entries.length > 0) {\n        // if `this.state.entries` is defined (not initial render) and\n        // longer than 0 entries, render ShowMood component for each entry\n        return entries.map(entry => <ShowMood key={entry} entry={entry} />)\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* Input Component */}\n        <InputMood onSubmit={this.appendNewEntry} />\n        \n        {/* Entries Components */}\n        <section id=\"show-mood\">\n          {this.mapEntriesToComponents()}\n        </section>\n\n        {/* Delete Button */}\n        <p id=\"delete-entries\" onClick={this.deleteEntries}>Delete My Entries</p>\n        <p id=\"tori\">made by <a href=\"http://www.github.com/t0ri\">tori</a> âœ¨ðŸ’– in 2019</p>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}